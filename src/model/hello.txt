@Test
  public void testPNGBlur() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.blurImage("sample", "sample-blur");
    Image actualImage = imageModel.getImage("sample-blur");

    imageModel.loadImage("output/sample-blur-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());
  }

  @Test
  public void testPNGRedComponent() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyRedComponent("sample", "sample-red-component");
    Image actualImage = imageModel.getImage("sample-red-component");


    imageModel.loadImage("output/sample-red-component-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGGreenComponent() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyGreenComponent("sample", "sample-green-component");
    Image actualImage = imageModel.getImage("sample-green-component");


    imageModel.loadImage("output/sample-green-component-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGBlueComponent() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyBlueComponent("sample", "sample-blue-component");
    Image actualImage = imageModel.getImage("sample-blue-component");


    imageModel.loadImage("output/sample-blue-component-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGValue() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyValue("sample", "sample-value");
    Image actualImage = imageModel.getImage("sample-value");


    imageModel.loadImage("output/sample-value-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGIntensity() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyIntensity("sample", "sample-intensity");
    Image actualImage = imageModel.getImage("sample-intensity");


    imageModel.loadImage("output/sample-intensity-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGLuma() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applyLuma("sample", "sample-luma");
    Image actualImage = imageModel.getImage("sample-luma");


    imageModel.loadImage("output/sample-luma-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGRGBSplit() throws IOException {

    imageModel.loadImage("input/sample.png", "sample");
    imageModel.rgbSplit("sample", "sample-red", "sample-green", "sample-blue");

    Image actualImageRed = imageModel.getImage("sample-red");
    Image actualImageGreen = imageModel.getImage("sample-green");
    Image actualImageBlue = imageModel.getImage("sample-blue");

    imageModel.loadImage("output/sample-red-expected.png", "expectedImageRed");
    imageModel.loadImage("output/sample-green-expected.png", "expectedImageGreen");
    imageModel.loadImage("output/sample-blue-expected.png", "expectedImageBlue");

    Image expectedImageRed = imageModel.getImage("expectedImageRed");
    Image expectedImageGreen = imageModel.getImage("expectedImageGreen");
    Image expectedImageBlue = imageModel.getImage("expectedImageBlue");

    assertEquals(expectedImageRed.getRedChannel(), actualImageRed.getRedChannel());
    assertEquals(expectedImageGreen.getRedChannel(), actualImageGreen.getRedChannel());
    assertEquals(expectedImageBlue.getRedChannel(), actualImageBlue.getRedChannel());


  }

  @Test
  public void testPNGRGBCombine() throws IOException {
    imageModel.loadImage("input/sample-red.png", "sample-red");
    imageModel.loadImage("input/sample-green.png", "sample-green");
    imageModel.loadImage("input/sample-blue.png", "sample-blue");

    imageModel.rgbCombine("sample-rgb-combine","sample-red", "sample-green", "sample-blue");

    Image actualImage = imageModel.getImage("sample-rgb-combine");

    imageModel.loadImage("output/sample.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());
  }

  @Test
  public void testPNGBrighten() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.brightenImage(20,"sample", "sample-brighten");
    Image actualImage = imageModel.getImage("sample-brighten");


    imageModel.loadImage("output/sample-brighten-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGDarken() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.brightenImage(-40,"sample", "sample-darken");
    Image actualImage = imageModel.getImage("sample-darken");


    imageModel.loadImage("output/sample-darken-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGHorizontal() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.flipHorizontally("sample", "sample-horizontal");
    Image actualImage = imageModel.getImage("sample-horizontal");


    imageModel.loadImage("output/sample-horizontal-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGVertical() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.flipVertically("sample", "sample-vertical");
    Image actualImage = imageModel.getImage("sample-vertical");



    imageModel.loadImage("output/sample-vertical-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGSepia() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.applySepia("sample", "sample-sepia");
    Image actualImage = imageModel.getImage("sample-sepia");


    imageModel.loadImage("output/sample-sepia-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }

  @Test
  public void testPNGSharpen() throws IOException {
    imageModel.loadImage("input/sample.png", "sample");
    imageModel.sharpenImage("sample", "sample-sharpen");
    Image actualImage = imageModel.getImage("sample-sharpen");


    imageModel.loadImage("output/sample-sharpen-expected.png", "expectedImage");
    Image expectedImage = imageModel.getImage("expectedImage");

    assertEquals(expectedImage.getRedChannel(), actualImage.getRedChannel());
    assertEquals(expectedImage.getGreenChannel(), actualImage.getGreenChannel());
    assertEquals(expectedImage.getBlueChannel(), actualImage.getBlueChannel());

  }